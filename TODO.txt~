1. import/export playlists. m3u - https://en.wikipedia.org/wiki/M3U - http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html

2. 
def syspath(path, prefix=True):
    """Convert a path for use by the operating system. In particular,
    paths on Windows must receive a magic prefix and must be converted
    to Unicode before they are sent to the OS. To disable the magic
    prefix on Windows, set `prefix` to False---but only do this if you
    *really* know what you're doing.
    """
    # Don't do anything if we're not on windows
    if os.path.__name__ != 'ntpath':
        return path

    if not isinstance(path, six.text_type):
        # Beets currently represents Windows paths internally with UTF-8
        # arbitrarily. But earlier versions used MBCS because it is
        # reported as the FS encoding by Windows. Try both.
        try:
            path = path.decode('utf8')
        except UnicodeError:
            # The encoding should always be MBCS, Windows' broken
            # Unicode representation.
            encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
            path = path.decode(encoding, 'replace')

    # Add the magic prefix if it isn't already there.
    # http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx
    if prefix and not path.startswith(WINDOWS_MAGIC_PREFIX):
        if path.startswith(u'\\\\'):
            # UNC path. Final path should look like \\?\UNC\...
            path = u'UNC' + path[1:]
        path = WINDOWS_MAGIC_PREFIX + path

    return path

3. createPopupMenu()


4. contextMenuEvent(QContextMenuEvent * event)



5. http://doc.qt.io/qt-5/qwidget.html#stackUnder
http://doc.qt.io/qt-5/qwidget.html#raise


################### EXAMPLES FOR SAVE/RESTORE SETTINGS ##########################################


void MyMainWindow::closeEvent(QCloseEvent *event)
{
    QSettings settings("MyCompany", "MyApp");
    settings.setValue("geometry", saveGeometry());
    settings.setValue("windowState", saveState());
    QMainWindow::closeEvent(event);
}
void MainWindow::readSettings()
{
    QSettings settings("MyCompany", "MyApp");
    restoreGeometry(settings.value("myWidget/geometry").toByteArray());
    restoreState(settings.value("myWidget/windowState").toByteArray());
}

------------------------


        '''                    
                        void MainWindow::readSettings()
                        {
                            QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
                            const QByteArray geometry = settings.value("geometry", QByteArray()).toByteArray();
                            if (geometry.isEmpty()) {
                                const QRect availableGeometry = QApplication::desktop()->availableGeometry(this);
                                resize(availableGeometry.width() / 3, availableGeometry.height() / 2);
                                move((availableGeometry.width() - width()) / 2,
                                     (availableGeometry.height() - height()) / 2);
                            } else {
                                restoreGeometry(geometry);
                            }
                        }
        '''



        '''
                        void MainWindow::writeSettings()
                        {
                            QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
                            settings.setValue("geometry", saveGeometry());
                        }
        '''



########################################################################################

6.         openDirectory = QAction('Add directory', self)
        # openDirectory.setShortcut(QKeySequence(QtCore.Qt.CTRL + QtCore.sssQt.Key_O))
        openDirectory.setStatusTip('Open new directory')
        openDirectory.triggered.connect(self.choose_directory)

        openFile = QAction('Add file', self)
        # openFile.setShortcut(QKeySequence(QtCore.Qt.CTRL + QtCore.sssQt.Key_O))
        openFile.triggered.connect(self.choose_files)

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(openDirectory)
        fileMenu.addAction(openFile)


7.

	upperBar = QFrame()
        upperBar.setStyleSheet("border: 1px solid black;")
        back = QLabel("back")
        forward = QLabel("forward")
        home = QLabel("home")
        search = QLabel(" [--------- search bar -----------]")
        upperBarLayout = QHBoxLayout()
        upperBarLayout.addWidget(back, 0, QtCore.Qt.AlignLeft)
        upperBarLayout.addWidget(forward, 0, QtCore.Qt.AlignLeft)
        upperBarLayout.addWidget(home, 0, QtCore.Qt.AlignLeft)
        upperBarLayout.addStretch(2)
        upperBarLayout.addWidget(search, 4, QtCore.Qt.AlignLeft)
        upperBar.setLayout(upperBarLayout)
        upperBar.setSizePolicy(QSizePolicy.Expanding,
                               QSizePolicy.Fixed)




8.


            # elif tag == self.USER_DEFINED_TAG:
            #     description = frame.desc
            #     text_value = frame.text[0]      # we get the first element only, because the specifications say there can only be one text string 
            #     encoding = int(frame.encoding)
            #     key = '{}:{}'.format(self.USER_DEFINED_TAG, description)
            #     self.file_tags[key] = (encoding, text_value)
            # elif tag in self.INVOLVED_PERSONS_FRAMES:
            #     for role, name in frame.people:
            #         if role and name:
            #             encoding = int(frame.encoding)
            #             key = '{}:{}'.format(
            #                 self.INVOLVED_PERSONS_FRAMES[tag],
            #                 role)
            #             self.file_tags[key] = (encoding, name)
            # elif tag == 'USLT':
            #     if frame.desc:
            #         tag = 'lyrics:{}'.format(frame.desc)
            #     else:
            #         tag = 'lyrics'
            #     self.file_tags[tag] = (int(frame.encoding), frame.text)
            # elif tag == 'SYLT':
            #     pass  # TODO implementation
            # elif tag == 'RVA2':
            #     pass  # implement maybe? 'EQU2' too?
            # elif tag == 'PRIV':
            #     # TODO handle private framesk ]
            #     pass

9.

choose another image if there's no front cover


